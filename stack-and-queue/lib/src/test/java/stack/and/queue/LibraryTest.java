/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stack.and.queue;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {
    @Test void  pushOntoAStack() {
        Stack<Integer> stack = new Stack<Integer>();
        stack.push(5);
        String expected ="Stack: top=[5]-->NULL";
        assertEquals(expected,stack.toString());

    }
    @Test void  pushMultipleValues() {
        Stack<Integer> stack = new Stack<Integer>();
        stack.push(5);
        stack.push(4);
        stack.push(3);
        String expected ="Stack: top=[3]-->[4]-->[5]-->NULL";
        assertEquals(expected,stack.toString());

    }
    @Test void  popValue() {
        Stack<Integer> stack = new Stack<Integer>();
        stack.push(5);
        stack.push(4);
        stack.pop();
       int expected =5;
        assertEquals(expected,stack.pop());

    }
    @Test void  emptyAstackAfterMultiplePops() {
        Stack<Integer> stack = new Stack<Integer>();
        stack.push(5);
        stack.push(4);
        stack.pop();
        stack.pop();
        stack.pop();
        assertNull(stack.toString());

    }
    @Test void  peekTheNextItemOnTheStack() {
        Stack<Integer> stack = new Stack<Integer>();
        stack.push(5);
        stack.push(4);
        int expected = 4;
       assertEquals(expected,stack.peek());

    }
    @Test void  CanSuccessfullyInstantiateAnEmptyStack() {
        Stack<Integer> stack = new Stack<Integer>();
        assertEquals(null,stack.toString());

    }
    @Test void  popOrPeekOnEmptyStackRaisesException() {
        Stack<Integer> stack = new Stack<Integer>();
        stack.pop();
        stack.peek();
        assertNull(stack.toString());

    }
    @Test void  enqueueIntoAQueue() {
        Queue<Integer> queue = new Queue<>();
        queue.enqueue(5);
        String expected ="Queue: front=5";
        assertEquals(expected,queue.toString());

    }
    @Test void  enqueueMultipleValuesIntoAQueue() {
        Queue<Integer> queue = new Queue<>();
        queue.enqueue(5);
        queue.enqueue(4);
        queue.enqueue(3);
        String expected ="Queue: front=[5]-->[4]-->3";
        assertEquals(expected,queue.toString());

    }
    @Test void  dequeueOutOfAQueueTheExpectedValue() {
        Queue<Integer> queue = new Queue<>();
        queue.enqueue(5);
        queue.enqueue(4);
        queue.enqueue(3);
        queue.dequeue();
        String expected ="Queue: front=[4]-->3";
        assertEquals(expected,queue.toString());

    }

    @Test void  peekIntoAQueueSeeingTheExpectedValue() {
        Queue<Integer> queue = new Queue<>();
        queue.enqueue(5);
        queue.enqueue(4);
        queue.enqueue(3);
        int expected = 5;
        assertEquals(expected,queue.peek());

    }
    @Test void  emptyAQueueAfterMultipleDequeues() {
        Queue<Integer> queue = new Queue<>();
        queue.enqueue(5);
        queue.enqueue(4);
        queue.enqueue(3);
        queue.dequeue();
        queue.dequeue();
        queue.dequeue();
        queue.dequeue();
        assertEquals(null,queue.toString());

    }
    @Test void  instantiateAnEmptyQueue() {
        Queue<Integer> queue = new Queue<>();
        assertEquals(null,queue.toString());

    }
    @Test void  CallingDequeueOrPeekOnEmptyQueueRaisesException() {
        Queue<Integer> queue = new Queue<>();

        assertEquals(null,queue.toString());
        queue.peek();
        assertNull(queue.toString());
    }
//    @Test void enqueueStack(){
//        Stack<Integer> stack = new Stack<>();
//        stack.push(5);
//        stack.push(6);
//        stack.pop();
//        System.out.println(stack);
//        String expected = "Stack: top=[5]-->NULL";
//        assertEquals(expected,stack.toString());
//    }


}
